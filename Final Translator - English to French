{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Final Translator - English to French","provenance":[{"file_id":"1yI4MfyO6LvrhP3fSTbgFwe7YxaNOxrEN","timestamp":1591403138531},{"file_id":"1lUSgYsfQWLebo78NYcRzSo_m8lWgporB","timestamp":1590802574391},{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1590656075541}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"u1ByjZPSypnt","colab_type":"text"},"source":["# Translator using NLP\n","\n","##### Group 4: Apurva Shekhar, Harsh Tandon, Jaskaran Kohli, Ritu Ranjani Ravi Shankar, Suchita Negi"]},{"cell_type":"markdown","metadata":{"id":"m9JJ7FBw84tG","colab_type":"text"},"source":["# Stage 1: Importing dependencies"]},{"cell_type":"code","metadata":{"id":"ZbcvtPlp3YWu","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import math\n","import re\n","import time\n","import pickle\n","from google.colab import drive\n","\n","\n","import tensorflow as tf\n","from tensorflow.keras import layers\n","import tensorflow_datasets as tfds"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BQN8jwx48_yU","colab_type":"text"},"source":["# Stage 2: Data preprocessing"]},{"cell_type":"markdown","metadata":{"id":"bPlOT-2mlw0r","colab_type":"text"},"source":["## Loading files"]},{"cell_type":"markdown","metadata":{"id":"dCD9jwXsLwS_","colab_type":"text"},"source":["Lets import files from our google drive. <br>\n","The files can also be found through this link http://www.statmt.org/europarl/ <br>\n","The data is extracted from the proceedings of the European Parliament. It includes versions in 21 European languages. The data is actually a parallel corpora of language pairs that include English."]},{"cell_type":"code","metadata":{"id":"eQpbl1pXCR0p","colab_type":"code","outputId":"2c1c885a-835b-47d3-a30f-3a1fe0973f5f","executionInfo":{"status":"ok","timestamp":1591403779185,"user_tz":420,"elapsed":24681,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["drive.mount(\"/content/drive\")"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q8Or0sLV5b8t","colab_type":"code","colab":{}},"source":["with open(\"/content/drive/My Drive/en-fr/europarl-v7.fr-en.en\",\n","          mode='r',\n","          encoding='utf-8') as f:\n","    english = f.read()\n","with open(\"/content/drive/My Drive/en-fr/europarl-v7.fr-en.fr\",\n","          mode='r',\n","          encoding='utf-8') as f:\n","    French = f.read()\n","with open(\"/content/drive/My Drive/en-fr/nonbreaking_prefix.en\",\n","          mode='r',\n","          encoding='utf-8') as f:\n","    non_breaking_prefix_english = f.read()\n","with open(\"/content/drive/My Drive/en-fr/nonbreaking_prefix.fr\",\n","          mode='r',\n","          encoding='utf-8') as f:\n","    non_breaking_prefix_french = f.read()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"If4eae0P1WhG","colab_type":"code","outputId":"03c2e5d1-bfb7-4813-8e06-84fcb0554b48","executionInfo":{"status":"ok","timestamp":1591403792203,"user_tz":420,"elapsed":37687,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":423}},"source":["print(\"English\", english[:200])\n","print(\"French\", French[:200])\n","print(\"Non_breaking_prefix_English:\", non_breaking_prefix_english[70:100])\n","print(\"Non_breaking_prefix_french:\", non_breaking_prefix_french[70:100])"],"execution_count":4,"outputs":[{"output_type":"stream","text":["English Resumption of the session\n","I declare resumed the session of the European Parliament adjourned on Friday 17 December 1999, and I would like once again to wish you a happy new year in the hope that you e\n","French Reprise de la session\n","Je déclare reprise la session du Parlement européen qui avait été interrompue le vendredi 17 décembre dernier et je vous renouvelle tous mes vux en espérant que vous avez passé d\n","Non_breaking_prefix_English: \n","mrs\n","ms\n","ph\n","prof\n","sr\n","st\n","a.m\n","p.m\n","\n","Non_breaking_prefix_french: \n","chap\n","e.g\n","al\n","etc\n","ex\n","fig\n","suiv\n","s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TEFw0D2vP_Dl","colab_type":"text"},"source":["## Cleaning data"]},{"cell_type":"markdown","metadata":{"id":"PwIBeGXn7LIJ","colab_type":"text"},"source":["Getting the non_breaking_prefixes as a clean list of words with a point at the end so it is easier to use.\n"]},{"cell_type":"code","metadata":{"id":"L_TeuktU40Cb","colab_type":"code","colab":{}},"source":["non_breaking_prefix_english = non_breaking_prefix_english.split(\"\\n\")\n","non_breaking_prefix_english = [' ' + pref + '.' for pref in non_breaking_prefix_english]\n","non_breaking_prefix_french = non_breaking_prefix_french.split(\"\\n\")\n","non_breaking_prefix_french = [' ' + pref + '.' for pref in non_breaking_prefix_french]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"USraRBGa4tkM","colab_type":"code","outputId":"c1a60c1a-791f-4171-cbc7-88f14531fd93","executionInfo":{"status":"ok","timestamp":1591403792204,"user_tz":420,"elapsed":37676,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":50}},"source":["print(non_breaking_prefix_english[30:40])\n","print(non_breaking_prefix_french[30:40])"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[' mrs.', ' ms.', ' ph.', ' prof.', ' sr.', ' st.', ' a.m.', ' p.m.', ' vs.', ' i.e.']\n","[' chap.', ' e.g.', ' al.', ' etc.', ' ex.', ' fig.', ' suiv.', ' sup.', ' suppl.', ' tél.']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"H9x4mZfKMaxD","colab_type":"text"},"source":["We will need each word and other symbol that we want to keep to be in lower case and separated by spaces so we can \"tokenize\" them."]},{"cell_type":"code","metadata":{"id":"Qg-8LLK-WdFp","colab_type":"code","colab":{}},"source":["corpus_en = english\n","# Add $$$ after non ending sentence points\n","for prefix in non_breaking_prefix_english:\n","    corpus_en = corpus_en.replace(prefix, prefix + '$$$')\n","corpus_en = re.sub(r\"\\.(?=[0-9]|[a-z]|[A-Z])\", \".$$$\", corpus_en)\n","# Remove $$$ markers\n","corpus_en = re.sub(r\".\\$\\$\\$\", '', corpus_en)\n","# Clear multiple spaces\n","corpus_en = re.sub(r\"  +\", \" \", corpus_en)\n","corpus_en = corpus_en.split('\\n')\n","\n","corpus_fr = French\n","for prefix in non_breaking_prefix_french:\n","    corpus_fr = corpus_fr.replace(prefix, prefix + '$$$')\n","corpus_fr = re.sub(r\"\\.(?=[0-9]|[a-z]|[A-Z])\", \".$$$\", corpus_fr)\n","corpus_fr = re.sub(r\".\\$\\$\\$\", '', corpus_fr)\n","corpus_fr = re.sub(r\"  +\", \" \", corpus_fr)\n","corpus_fr = corpus_fr.split('\\n')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"81BrKqd-5Ex7","colab_type":"code","outputId":"e28144a7-3184-497f-dcdc-4b465f512b88","executionInfo":{"status":"ok","timestamp":1591403866012,"user_tz":420,"elapsed":111475,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["print(corpus_en[:2])\n","print(corpus_fr[:2])"],"execution_count":8,"outputs":[{"output_type":"stream","text":["['Resumption of the session', 'I declare resumed the session of the European Parliament adjourned on Friday 17 December 1999, and I would like once again to wish you a happy new year in the hope that you enjoyed a pleasant festive period.']\n","['Reprise de la session', 'Je déclare reprise la session du Parlement européen qui avait été interrompue le vendredi 17 décembre dernier et je vous renouvelle tous mes vux en espérant que vous avez passé de bonnes vacances.']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s-Y9v8-Tozl2","colab_type":"text"},"source":["## Tokenizing text"]},{"cell_type":"markdown","metadata":{"id":"p5YXanmOd_xK","colab_type":"text"},"source":["```\n","# Please convert this cell to code if you don't want to use our already tokenized vocabulary\n","# Press: CTRL+m+y\n","##-----This cell will take around 15 minutes to run-------------------\n","\n","#define tokenizer for english and french\n","tokenizer_en = tfds.features.text.SubwordTextEncoder.build_from_corpus(\n","    corpus_en, target_vocab_size=2**13)\n","tokenizer_fr = tfds.features.text.SubwordTextEncoder.build_from_corpus(\n","    corpus_fr, target_vocab_size=2**13)\n","\n","# define vocabulary size\n","VOCAB_SIZE_EN = tokenizer_en.vocab_size + 2\n","VOCAB_SIZE_FR = tokenizer_fr.vocab_size + 2\n","\n","#tokenize the vocabulary\n","inputs = [[VOCAB_SIZE_EN-2] + tokenizer_en.encode(sentence) + [VOCAB_SIZE_EN-1]\n","          for sentence in corpus_en]\n","outputs = [[VOCAB_SIZE_FR-2] + tokenizer_fr.encode(sentence) + [VOCAB_SIZE_FR-1]\n","           for sentence in corpus_fr]\n","\n","\n","#saving the tokenizer and tokenized vocabulary for future use\n","with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/tokenizer_en.pickle', 'wb') as handle:\n","    pickle.dump(tokenizer_en, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/tokenizer_fr.pickle', 'wb') as handle:\n","    pickle.dump(tokenizer_fr, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","\n","with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/inputs.pickle', 'wb') as handle:\n","    pickle.dump(inputs, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/outputs.pickle', 'wb') as handle:\n","    pickle.dump(outputs, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","```"]},{"cell_type":"code","metadata":{"id":"VXsSwovk2whX","colab_type":"code","colab":{}},"source":["# loading our saved tokenizer and tokenized vocabulary\n","try:\n","  tokenizer_en, tokenizer_fr, inputs, outputs\n","except:\n","  with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/tokenizer_en.pickle', 'rb') as handle:\n","      tokenizer_en = pickle.load(handle)\n","\n","  with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/tokenizer_fr.pickle', 'rb') as handle:\n","      tokenizer_fr = pickle.load(handle)\n","\n","  with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/inputs.pickle', 'rb') as handle:\n","      inputs = pickle.load(handle)\n","\n","  with open('/content/drive/My Drive/en-fr/Checkpoint/pickle/outputs.pickle', 'rb') as handle:\n","      outputs = pickle.load(handle)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nUVy4-KAJOAI","colab_type":"code","outputId":"059b6ab6-f873-49b3-81d0-5dd758238784","executionInfo":{"status":"ok","timestamp":1591403888798,"user_tz":420,"elapsed":134252,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":50}},"source":["#this is a sample string to show how tokenizer works\n","sample_string = 'Transformer is awesome.'\n","\n","tokenized_string = tokenizer_en.encode(sample_string)\n","print ('Tokenized string is {}'.format(tokenized_string))\n","\n","original_string = tokenizer_en.decode(tokenized_string)\n","print ('The original string: {}'.format(original_string))\n","\n","assert original_string == sample_string"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Tokenized string is [3420, 1513, 9, 4302, 238, 3257, 7978]\n","The original string: Transformer is awesome.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SK2cz3HTJhWi","colab_type":"code","outputId":"deb89543-5510-447e-c015-98feae7243cb","executionInfo":{"status":"ok","timestamp":1591403888798,"user_tz":420,"elapsed":134246,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":134}},"source":["#this shows how the string is mapped\n","for ts in tokenized_string:\n","  print ('{} ----> {}'.format(ts, tokenizer_en.decode([ts])))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["3420 ----> Trans\n","1513 ----> former \n","9 ----> is \n","4302 ----> aw\n","238 ----> es\n","3257 ----> ome\n","7978 ----> .\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bG6AlcFMpC5C","colab_type":"text"},"source":["## Remove too long sentences"]},{"cell_type":"code","metadata":{"id":"F6CD6PLGyQWy","colab_type":"code","colab":{}},"source":["#-------This cell will take around 5 minutes to run------------------\n","MAX_LENGTH = 20\n","idx_to_remove = [count for count, sent in enumerate(inputs)\n","                 if len(sent) > MAX_LENGTH]\n","for idx in reversed(idx_to_remove):\n","    del inputs[idx]\n","    del outputs[idx]\n","idx_to_remove = [count for count, sent in enumerate(outputs)\n","                 if len(sent) > MAX_LENGTH]\n","for idx in reversed(idx_to_remove):\n","    del inputs[idx]\n","    del outputs[idx]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ypm8h5aZQTZ1","colab_type":"text"},"source":["## Inputs/outputs creation"]},{"cell_type":"markdown","metadata":{"id":"9FP0WPsdM8hl","colab_type":"text"},"source":["As we train with batches, we need each input to have the same length. We pad with the appropriate token, and we will make sure this padding token doesn't interfere with our training later."]},{"cell_type":"code","metadata":{"id":"nvDfLDWUONlE","colab_type":"code","colab":{}},"source":["inputs = tf.keras.preprocessing.sequence.pad_sequences(inputs,\n","                                                       value=0,\n","                                                       padding='post',\n","                                                       maxlen=MAX_LENGTH)\n","outputs = tf.keras.preprocessing.sequence.pad_sequences(outputs,\n","                                                        value=0,\n","                                                        padding='post',\n","                                                        maxlen=MAX_LENGTH)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cMWQNJbLBLBO","colab_type":"code","outputId":"8ec8f7cf-344d-4c2d-c5e7-381bb2a6fd7f","executionInfo":{"status":"ok","timestamp":1591404198694,"user_tz":420,"elapsed":444131,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":151}},"source":["print(inputs[:2])\n","print(outputs[:2])"],"execution_count":14,"outputs":[{"output_type":"stream","text":["[[8188 4399  962 2124    3    1 2528 8189    0    0    0    0    0    0\n","     0    0    0    0    0    0]\n"," [8188 7303 4717    2 1123    2   10   16 4784   89   13 7798 8033 7978\n","  8189    0    0    0    0    0]]\n","[[8169 1248  800    1    3 5731 8170    0    0    0    0    0    0    0\n","     0    0    0    0    0    0]\n"," [8169   34   55 1682    6   55 4965 7945   19   35 5403 7945    1 7187\n","  7959 8170    0    0    0    0]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wFxMp3TOIYff","colab_type":"code","colab":{}},"source":["BATCH_SIZE = 64\n","BUFFER_SIZE = 20000\n","\n","dataset = tf.data.Dataset.from_tensor_slices((inputs, outputs))\n","\n","dataset = dataset.cache()\n","dataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE)\n","dataset = dataset.prefetch(tf.data.experimental.AUTOTUNE)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ycT0YqydRcUd","colab_type":"text"},"source":["# Stage 3: Model building"]},{"cell_type":"markdown","metadata":{"id":"-SBoH8G4XyR9","colab_type":"text"},"source":["## Embedding"]},{"cell_type":"markdown","metadata":{"id":"7G9C3ucmJ86I","colab_type":"text"},"source":["Positional encoding formulae:\n","\n","\n","\n","$PE_{(pos,2i)} =\\sin(pos/10000^{2i/dmodel})$\n","\n","$PE_{(pos,2i+1)} =\\cos(pos/10000^{2i/dmodel})$"]},{"cell_type":"code","metadata":{"id":"K_18KLFdweQn","colab_type":"code","colab":{}},"source":["def get_angles(pos, i, d_model):\n","  angle_rates = 1 / np.power(10000, (2 * (i//2)) / np.float32(d_model))\n","  return pos * angle_rates"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kVWasZGYwgwV","colab_type":"code","colab":{}},"source":["def positional_encoding(position, d_model):\n","  angle_rads = get_angles(np.arange(position)[:, np.newaxis],\n","                          np.arange(d_model)[np.newaxis, :],\n","                          d_model)\n","  \n","  # apply sin to even indices in the array; 2i\n","  angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n","  \n","  # apply cos to odd indices in the array; 2i+1\n","  angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n","    \n","  pos_encoding = angle_rads[np.newaxis, ...]\n","    \n","  return tf.cast(pos_encoding, dtype=tf.float32)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YoEcOYpIwjD_","colab_type":"code","outputId":"7608c96a-d9dc-4c00-971c-6df807c472fb","executionInfo":{"status":"ok","timestamp":1591404199293,"user_tz":420,"elapsed":444718,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":300}},"source":["pos_encoding = positional_encoding(50, 512)\n","print (pos_encoding.shape)\n","\n","plt.pcolormesh(pos_encoding[0], cmap='RdBu')\n","plt.xlabel('Depth')\n","plt.xlim((0, 512))\n","plt.ylabel('Position')\n","plt.colorbar()\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"stream","text":["(1, 50, 512)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"T-WEJmdDZoOi","colab_type":"code","colab":{}},"source":["# this masks the padding tokens at the end of sentences\n","def create_padding_mask(seq):\n","        mask = tf.cast(tf.math.equal(seq, 0), tf.float32)\n","        return mask[:, tf.newaxis, tf.newaxis, :]\n","\n","# this mask makes sure that decoder does not have access to future words\n","def create_look_ahead_mask(size):\n","        look_ahead_mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n","        return look_ahead_mask"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lcw8YIQqRhOJ","colab_type":"text"},"source":["## Attention"]},{"cell_type":"markdown","metadata":{"id":"3sffhwwvX-wj","colab_type":"text"},"source":["### Attention computation"]},{"cell_type":"markdown","metadata":{"id":"7VBuW6lESLDX","colab_type":"text"},"source":["$Attention(Q, K, V ) = \\text{softmax}\\left(\\dfrac{QK^T}{\\sqrt{d_k}}\\right)V $"]},{"cell_type":"code","metadata":{"id":"2rEoCNJURbrT","colab_type":"code","colab":{}},"source":["def scaled_dot_product_attention(queries, keys, values, mask):\n","    product = tf.matmul(queries, keys, transpose_b=True)\n","    \n","    keys_dim = tf.cast(tf.shape(keys)[-1], tf.float32)\n","    scaled_product = product / tf.math.sqrt(keys_dim)\n","    \n","    if mask is not None:\n","        scaled_product += (mask * -1e9)\n","\n","    attention_weights = tf.nn.softmax(scaled_product, axis=-1)  # (..., seq_len_q, seq_len_k)\n","    \n","    attention = tf.matmul(attention_weights, values)\n","    \n","    return attention, attention_weights"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AUWB2fOrGtWa","colab_type":"text"},"source":["As the softmax normalization is done on K, its values decide the amount of importance given to Q.\n","\n","The output represents the multiplication of the attention weights and the V (value) vector. This ensures that the words you want to focus on are kept as-is and the irrelevant words are flushed out."]},{"cell_type":"code","metadata":{"id":"vAJfEwI7VK5Y","colab_type":"code","colab":{}},"source":["def print_out(q, k, v):\n","  temp_out, temp_attn = scaled_dot_product_attention(\n","      q, k, v, None)\n","  print ('Attention weights are:')\n","  print (temp_attn)\n","  print ('Output is:')\n","  print (temp_out)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZFmgwXItVZM8","colab_type":"code","outputId":"5d7d8679-dc21-455f-b920-082ace1da870","executionInfo":{"status":"ok","timestamp":1591404199640,"user_tz":420,"elapsed":445053,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":84}},"source":["np.set_printoptions(suppress=True)\n","\n","temp_k = tf.constant([[10,0,0],\n","                      [0,10,0],\n","                      [0,0,10],\n","                      [0,0,10]], dtype=tf.float32)  # (4, 3)\n","\n","temp_v = tf.constant([[   1,0],\n","                      [  10,0],\n","                      [ 100,5],\n","                      [1000,6]], dtype=tf.float32)  # (4, 2)\n","\n","# This `query` aligns with the second `key`,\n","# so the second `value` is returned.\n","temp_q = tf.constant([[0, 10, 0]], dtype=tf.float32)  # (1, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Attention weights are:\n","tf.Tensor([[0. 1. 0. 0.]], shape=(1, 4), dtype=float32)\n","Output is:\n","tf.Tensor([[10.  0.]], shape=(1, 2), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ucgPhnuJHOD_","colab_type":"code","outputId":"4378a88c-78cd-4d0f-8b99-95684d263b5f","executionInfo":{"status":"ok","timestamp":1591404199641,"user_tz":420,"elapsed":445048,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":84}},"source":["# This query aligns with a repeated key (third and fourth), \n","# so all associated values get averaged.\n","temp_q = tf.constant([[0, 0, 10]], dtype=tf.float32)  # (1, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Attention weights are:\n","tf.Tensor([[0.  0.  0.5 0.5]], shape=(1, 4), dtype=float32)\n","Output is:\n","tf.Tensor([[550.    5.5]], shape=(1, 2), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HnlRUOROHUT_","colab_type":"code","outputId":"c2e40a00-7068-4e76-a9df-9aa0f829bcf1","executionInfo":{"status":"ok","timestamp":1591404199642,"user_tz":420,"elapsed":445043,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":84}},"source":["# This query aligns equally with the first and second key, \n","# so their values get averaged.\n","temp_q = tf.constant([[10, 10, 0]], dtype=tf.float32)  # (1, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Attention weights are:\n","tf.Tensor([[0.5 0.5 0.  0. ]], shape=(1, 4), dtype=float32)\n","Output is:\n","tf.Tensor([[5.5 0. ]], shape=(1, 2), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1jxdNt0vHV18","colab_type":"code","outputId":"4d3df78d-4070-4dce-e300-4f20051ecb30","executionInfo":{"status":"ok","timestamp":1591404199642,"user_tz":420,"elapsed":445036,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":185}},"source":["temp_q = tf.constant([[0, 0, 10], [0, 10, 0], [10, 10, 0]], dtype=tf.float32)  # (3, 3)\n","print_out(temp_q, temp_k, temp_v)"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Attention weights are:\n","tf.Tensor(\n","[[0.  0.  0.5 0.5]\n"," [0.  1.  0.  0. ]\n"," [0.5 0.5 0.  0. ]], shape=(3, 4), dtype=float32)\n","Output is:\n","tf.Tensor(\n","[[550.    5.5]\n"," [ 10.    0. ]\n"," [  5.5   0. ]], shape=(3, 2), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-MjtvXrfYEx7","colab_type":"text"},"source":["### Multi-head attention sublayer"]},{"cell_type":"code","metadata":{"id":"lvq4I9uTX5p7","colab_type":"code","colab":{}},"source":["class MultiHeadAttention(layers.Layer):\n","    \n","    def __init__(self, d_model, nb_proj):\n","        super(MultiHeadAttention, self).__init__()\n","        self.nb_proj = nb_proj\n","        self.d_model = d_model\n","\n","        assert self.d_model % self.nb_proj == 0\n","        \n","        self.d_proj = self.d_model // self.nb_proj\n","        \n","        self.query_lin = layers.Dense(units=self.d_model)\n","        self.key_lin = layers.Dense(units=self.d_model)\n","        self.value_lin = layers.Dense(units=self.d_model)\n","        \n","        self.final_lin = layers.Dense(units=self.d_model)\n","        \n","    def split_proj(self, inputs, batch_size):\n","       # inputs: (batch_size, seq_length, d_model)\n","        shape = (batch_size,\n","                 -1,\n","                 self.nb_proj,\n","                 self.d_proj)\n","        splited_inputs = tf.reshape(inputs, shape=shape)\n","         # (batch_size, seq_length, nb_proj, d_proj)\n","        return tf.transpose(splited_inputs, perm=[0, 2, 1, 3]) # (batch_size, nb_proj, seq_length, d_proj)\n","    \n","    def call(self, queries, keys, values, mask):\n","        batch_size = tf.shape(queries)[0]\n","        \n","        queries = self.query_lin(queries)\n","        keys = self.key_lin(keys)\n","        values = self.value_lin(values)\n","        \n","        queries = self.split_proj(queries, batch_size)\n","        keys = self.split_proj(keys, batch_size)\n","        values = self.split_proj(values, batch_size)\n","        \n","        attention, attention_weights = scaled_dot_product_attention(queries, keys, values, mask)\n","        \n","        attention = tf.transpose(attention, perm=[0, 2, 1, 3])\n","        \n","        concat_attention = tf.reshape(attention,\n","                                      shape=(batch_size, -1, self.d_model))\n","        \n","        outputs = self.final_lin(concat_attention)\n","        \n","        return outputs, attention_weights"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M7pmjJzZHflI","colab_type":"text"},"source":["At each location in the sequence, y, the MultiHeadAttention runs all 8 attention heads across all other locations in the sequence, returning a new vector of the same length at each location."]},{"cell_type":"code","metadata":{"id":"0i9IhjBpHiOQ","colab_type":"code","outputId":"2573ed84-6c37-4428-cbe4-b01a07788289","executionInfo":{"status":"ok","timestamp":1591404199644,"user_tz":420,"elapsed":445029,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["temp_mha = MultiHeadAttention(d_model=512, nb_proj=8)\n","y = tf.random.uniform((1, 60, 512))  # (batch_size, encoder_sequence, d_model)\n","out, attn = temp_mha(queries=y, keys=y, values=y, mask=None)\n","out.shape, attn.shape"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([1, 60, 512]), TensorShape([1, 8, 60, 60]))"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"yiyuHe1OeT5N","colab_type":"text"},"source":["## Encoder\n","\n","Each encoder layer consists of sublayers:\n","\n","1. Multi-head attention (with padding mask)\n","2. Point wise feed forward networks."]},{"cell_type":"code","metadata":{"id":"vjcTyHXej7Yp","colab_type":"code","colab":{}},"source":["def point_wise_feed_forward_network(d_model, dff):\n","  return tf.keras.Sequential([\n","      tf.keras.layers.Dense(dff, activation='relu'),  # (batch_size, seq_len, dff)\n","      tf.keras.layers.Dense(d_model)  # (batch_size, seq_len, d_model)\n","  ])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UV0ZMH7KT_KZ","colab_type":"code","colab":{}},"source":["class EncoderLayer(layers.Layer):\n","    \n","    def __init__(self, d_model, FFN_units, nb_proj, dropout_rate):\n","        super(EncoderLayer, self).__init__()\n","        self.d_model = d_model\n","        self.FFN_units = FFN_units\n","        self.nb_proj = nb_proj\n","        self.dropout_rate = dropout_rate\n","\n","        \n","        self.multi_head_attention = MultiHeadAttention(self.d_model, self.nb_proj)\n","        self.ffn = point_wise_feed_forward_network(self.d_model, self.FFN_units)\n","\n","        self.norm_1 = layers.LayerNormalization(epsilon=1e-6)\n","        self.norm_2 = layers.LayerNormalization(epsilon=1e-6)\n","\n","        self.dropout_1 = layers.Dropout(rate=self.dropout_rate)\n","        self.dropout_2 = layers.Dropout(rate=self.dropout_rate)        \n","        \n","\n","    def call(self, inputs, training, mask):\n","        attention, _ = self.multi_head_attention(inputs,\n","                                              inputs,\n","                                              inputs,\n","                                              mask)\n","        attention = self.dropout_1(attention, training=training)\n","        out1 = self.norm_1(inputs + attention)\n","        \n","        ffn_output = self.ffn(out1)  # (batch_size, input_seq_len, d_model)\n","        ffn_output = self.dropout_2(ffn_output, training=training)\n","        out2 = self.norm_2(out1 + ffn_output)\n","        \n","        return out2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"g5780ni7itLI","colab_type":"code","outputId":"3593d3c4-36d6-4075-b164-481c34859379","executionInfo":{"status":"ok","timestamp":1591404200126,"user_tz":420,"elapsed":445501,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["sample_encoder_layer = EncoderLayer(d_model=512, nb_proj=8, FFN_units=2048, dropout_rate=0.1)\n","\n","sample_encoder_layer_output = sample_encoder_layer(\n","    tf.random.uniform((64, 43, 512)), False, None)\n","\n","sample_encoder_layer_output.shape  # (batch_size, input_seq_len, d_model)"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 43, 512])"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"Fpr9KIMm8yk5","colab_type":"text"},"source":["The Encoder consists of:\n","\n","1. Input Embedding\n","2. Positional Encoding\n","3. N encoder layers (in our case, we have just 1)\n","\n","The input is put through an embedding which is summed with the positional encoding. The output of this summation is the input to the encoder layers. The output of the encoder is the input to the decoder."]},{"cell_type":"code","metadata":{"id":"P-P92KeZih60","colab_type":"code","colab":{}},"source":["class Encoder(layers.Layer):\n","    \n","    def __init__(self,\n","                 nb_layers,\n","                 FFN_units,\n","                 nb_proj,\n","                 dropout_rate,\n","                 vocab_size,\n","                 d_model,\n","                 maximum_position_encoding,\n","                 name=\"encoder\"):\n","        super(Encoder, self).__init__(name=name)\n","        self.nb_layers = nb_layers\n","        self.d_model = d_model\n","        \n","        self.embedding = layers.Embedding(vocab_size, d_model)\n","        self.pos_encoding = positional_encoding(maximum_position_encoding, self.d_model)\n","        self.dropout = layers.Dropout(rate=dropout_rate)\n","        self.enc_layers = [EncoderLayer(d_model, FFN_units, nb_proj,\n","                                        dropout_rate) \n","                           for _ in range(nb_layers)]\n","    \n","    def call(self, inputs, training, mask):\n","\n","        seq_len = tf.shape(inputs)[1]\n","\n","        outputs = self.embedding(inputs)\n","        outputs *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        outputs += self.pos_encoding[:, :seq_len, :]\n","        outputs = self.dropout(outputs, training)\n","        \n","        for i in range(self.nb_layers):\n","            outputs = self.enc_layers[i](outputs, training, mask)\n","\n","        return outputs"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ju0ThLFgnKiK","colab_type":"code","outputId":"824ed95c-fcf4-4b42-d5ed-077e65c6317a","executionInfo":{"status":"ok","timestamp":1591404201574,"user_tz":420,"elapsed":446941,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["sample_encoder = Encoder(nb_layers=2, d_model=512, nb_proj=8, \n","                         FFN_units=2048, vocab_size=8500,\n","                         maximum_position_encoding=10000, dropout_rate=0.1)\n","temp_input = tf.random.uniform((64, 62), dtype=tf.int64, minval=0, maxval=200)\n","\n","sample_encoder_output = sample_encoder(temp_input, training=False, mask=None)\n","\n","print (sample_encoder_output.shape)  # (batch_size, input_seq_len, d_model)"],"execution_count":32,"outputs":[{"output_type":"stream","text":["(64, 62, 512)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7DthraBEwuvl","colab_type":"text"},"source":["## Decoder\n","\n","Each decoder layer consists of sublayers:\n","\n","1. Masked multi-head attention (with look ahead mask and padding mask)\n","2. Multi-head attention (with padding mask). V (value) and K (key) receive the encoder output as inputs. Q (query) receives the output from the masked multi-head attention sublayer.\n","3. Point wise feed forward networks."]},{"cell_type":"code","metadata":{"id":"7ZWZyFBnwy8u","colab_type":"code","colab":{}},"source":["class DecoderLayer(layers.Layer):\n","    \n","    def __init__(self, d_model, FFN_units, nb_proj, dropout_rate):\n","        super(DecoderLayer, self).__init__()\n","        self.d_model = d_model\n","        self.FFN_units = FFN_units\n","        self.nb_proj = nb_proj\n","        self.dropout_rate = dropout_rate\n","    \n","\n","        # Self multi head attention\n","        self.multi_head_attention_1 = MultiHeadAttention(self.d_model, self.nb_proj)\n","        self.dropout_1 = layers.Dropout(rate=self.dropout_rate)\n","        self.norm_1 = layers.LayerNormalization(epsilon=1e-6)\n","        \n","        # Multi head attention combined with encoder output\n","        self.multi_head_attention_2 = MultiHeadAttention(self.d_model, self.nb_proj)\n","        self.dropout_2 = layers.Dropout(rate=self.dropout_rate)\n","        self.norm_2 = layers.LayerNormalization(epsilon=1e-6)\n","        \n","        # Feed foward\n","        self.ffn = point_wise_feed_forward_network(self.d_model, self.FFN_units)\n","        self.dropout_3 = layers.Dropout(rate=self.dropout_rate)\n","        self.norm_3 = layers.LayerNormalization(epsilon=1e-6)\n","        \n","    def call(self, inputs, enc_outputs, training, look_ahead_mask, padding_mask):\n","        attention, attention_weights_block1 = self.multi_head_attention_1(inputs,\n","                                                inputs,\n","                                                inputs,\n","                                                look_ahead_mask)\n","        attention = self.dropout_1(attention, training=training)\n","        out1 = self.norm_1(attention + inputs)\n","        \n","        attention_2, attention_weights_block2 = self.multi_head_attention_2(out1, enc_outputs, enc_outputs, padding_mask)\n","        attention_2 = self.dropout_2(attention_2, training=training)\n","        out2 = self.norm_2(attention_2 + out1)\n","        \n","        ffn_output = self.ffn(out2)  # (batch_size, target_seq_len, d_model)\n","        ffn_output = self.dropout_3(ffn_output, training=training)\n","        out3 = self.norm_3(ffn_output + out2)\n","        \n","        return out3, attention_weights_block1, attention_weights_block2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"shgu6bSZnb9k","colab_type":"code","outputId":"d9285ef2-46b3-4759-fc77-789dfebdc32d","executionInfo":{"status":"ok","timestamp":1591404202259,"user_tz":420,"elapsed":447618,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["sample_decoder_layer = DecoderLayer(d_model=512, nb_proj=8, FFN_units=2048, dropout_rate=0.1)\n","\n","sample_decoder_layer_output, _, _ = sample_decoder_layer(\n","    tf.random.uniform((64, 50, 512)), sample_encoder_layer_output, \n","    False, None, None)\n","\n","sample_decoder_layer_output.shape  # (batch_size, target_seq_len, d_model)"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 50, 512])"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"rSVesTxH8ZN6","colab_type":"text"},"source":["The Decoder consists of:\n","\n","1. Output Embedding\n","2. Positional Encoding\n","3. N decoder layers (in our case, we have just 1)\n","\n","The target is put through an embedding which is summed with the positional encoding. The output of this summation is the input to the decoder layers. The output of the decoder is the input to the final linear layer."]},{"cell_type":"code","metadata":{"id":"kpzdiWHiwywF","colab_type":"code","colab":{}},"source":["class Decoder(layers.Layer):\n","    \n","    def __init__(self,\n","                 nb_layers,\n","                 FFN_units,\n","                 nb_proj,\n","                 dropout_rate,\n","                 vocab_size,\n","                 d_model,\n","                 maximum_position_encoding,\n","                 name=\"decoder\"):\n","        super(Decoder, self).__init__(name=name)\n","        self.d_model = d_model\n","        self.nb_layers = nb_layers\n","        \n","        self.embedding = layers.Embedding(vocab_size, d_model)\n","        self.pos_encoding = positional_encoding(maximum_position_encoding, self.d_model)\n","        self.dropout = layers.Dropout(rate=dropout_rate)\n","        \n","        self.dec_layers = [DecoderLayer(d_model, FFN_units, nb_proj,\n","                                        dropout_rate) \n","                           for i in range(nb_layers)]\n","    \n","    def call(self, inputs, enc_outputs, training, look_ahead_mask, padding_mask):\n","        seq_len = tf.shape(inputs)[1]\n","        attention_weights = {}\n","        outputs = self.embedding(inputs)\n","        outputs *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n","        outputs += self.pos_encoding[:, :seq_len, :]#(outputs)\n","        outputs = self.dropout(outputs, training=training)\n","        \n","        for i in range(self.nb_layers):\n","            outputs, block1, block2 = self.dec_layers[i](outputs,\n","                                         enc_outputs,\n","                                         training,\n","                                         look_ahead_mask,\n","                                         padding_mask)\n","            attention_weights['decoder_layer{}_block1'.format(i+1)] = block1\n","            attention_weights['decoder_layer{}_block2'.format(i+1)] = block2\n","\n","        return outputs, attention_weights"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-L9_5gfnn_SI","colab_type":"code","outputId":"e8d20787-8921-4800-b539-1add014c5b71","executionInfo":{"status":"ok","timestamp":1591404203262,"user_tz":420,"elapsed":448613,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["sample_decoder = Decoder(nb_layers=2, d_model=512, nb_proj=8, \n","                         FFN_units=2048, vocab_size=8000,\n","                         maximum_position_encoding=5000, dropout_rate=0.1)\n","temp_input = tf.random.uniform((64, 26), dtype=tf.int64, minval=0, maxval=200)\n","\n","output, attn = sample_decoder(inputs=temp_input, \n","                              enc_outputs=sample_encoder_output, \n","                              training=False,\n","                              look_ahead_mask=None, \n","                              padding_mask=None)\n","\n","output.shape, attn['decoder_layer2_block2'].shape"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([64, 26, 512]), TensorShape([64, 8, 26, 62]))"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"x5sJYkjbz5DD","colab_type":"text"},"source":["## Transformer\n","Transformer consists of the encoder, decoder and a final linear layer. The output of the decoder is the input to the linear layer and its output is returned.\n","\n","As the transformer predicts each word, self-attention allows it to look at the previous words in the input sequence to better predict the next word.\n","\n","To prevent the model from peeking at the expected output the model uses a look-ahead mask."]},{"cell_type":"code","metadata":{"id":"GqvqNjJPwyh-","colab_type":"code","colab":{}},"source":["class Transformer(tf.keras.Model):\n","    \n","    def __init__(self,\n","                 vocab_size_enc,\n","                 vocab_size_dec,\n","                 d_model,\n","                 nb_layers,\n","                 FFN_units,\n","                 nb_proj,\n","                 pe_input,\n","                 pe_target,\n","                 dropout_rate,\n","                 name=\"transformer\"):\n","        super(Transformer, self).__init__(name=name)\n","  \n","        self.encoder = Encoder(nb_layers=nb_layers,\n","                               FFN_units=FFN_units,\n","                               nb_proj=nb_proj,\n","                               dropout_rate=dropout_rate,\n","                               vocab_size=vocab_size_enc,\n","                               maximum_position_encoding=pe_input,\n","                               d_model=d_model)\n","        self.decoder = Decoder(nb_layers=nb_layers,\n","                               FFN_units=FFN_units,\n","                               nb_proj=nb_proj,\n","                               dropout_rate=dropout_rate,\n","                               vocab_size=vocab_size_dec,\n","                               maximum_position_encoding=pe_target,\n","                               d_model=d_model)\n","        self.last_linear = layers.Dense(units=vocab_size_dec, name=\"lin_ouput\")\n","    \n","    def call(self, enc_inputs, dec_inputs, training, enc_padding_mask, look_ahead_mask, dec_padding_mask):\n","        \n","        #enc_outputs are Attention Vectors (English) from ENCODER\n","        enc_outputs = self.encoder(enc_inputs, training, enc_padding_mask)\n","        \n","        #dec_outputs are Attention Vectors (English-French) from DECODER\n","        dec_outputs, attention_weights = self.decoder(dec_inputs,\n","                                                      enc_outputs,\n","                                                      training, \n","                                                      look_ahead_mask,\n","                                                      dec_padding_mask)\n","        \n","        outputs = self.last_linear(dec_outputs)\n","        \n","        return outputs, attention_weights"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LxM5Bm7LpbjP","colab_type":"code","outputId":"dfdcab56-9e26-4a98-c497-ccc8ee76b6de","executionInfo":{"status":"ok","timestamp":1591404205802,"user_tz":420,"elapsed":451145,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["sample_transformer = Transformer(\n","    nb_layers=2, d_model=512, nb_proj=8, FFN_units=2048, \n","    vocab_size_enc=8500, vocab_size_dec=8000, pe_input=10000, pe_target=6000, dropout_rate=0.1)\n","\n","temp_input = tf.random.uniform((64, 38), dtype=tf.int64, minval=0, maxval=200)\n","temp_target = tf.random.uniform((64, 36), dtype=tf.int64, minval=0, maxval=200)\n","\n","fn_out, _ = sample_transformer(enc_inputs=temp_input,\n","                               dec_inputs=temp_target,\n","                               training=False, \n","                               enc_padding_mask=None, \n","                               look_ahead_mask=None,\n","                               dec_padding_mask=None)\n","\n","fn_out.shape  # (batch_size, tar_seq_len, target_vocab_size)"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 36, 8000])"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"-c-LRThUPrso","colab_type":"text"},"source":["# Training"]},{"cell_type":"markdown","metadata":{"id":"bNEKWNNjuEyM","colab_type":"text"},"source":["## Set Hyper Parameters"]},{"cell_type":"code","metadata":{"id":"qiOdqQ5qPs8z","colab_type":"code","colab":{}},"source":["tf.keras.backend.clear_session()\n","\n","# Hyper-parameters\n","D_MODEL = 128 # 512\n","NB_LAYERS = 4 # 6\n","FFN_UNITS = 512 # 2048\n","NB_PROJ = 8 # 8\n","DROPOUT_RATE = 0.1 # 0.1\n","\n","VOCAB_SIZE_EN = tokenizer_en.vocab_size + 2\n","VOCAB_SIZE_FR = tokenizer_fr.vocab_size + 2\n","\n","transformer = Transformer(vocab_size_enc=VOCAB_SIZE_EN,\n","                          vocab_size_dec=VOCAB_SIZE_FR,\n","                          d_model=D_MODEL,\n","                          nb_layers=NB_LAYERS,\n","                          FFN_units=FFN_UNITS,\n","                          nb_proj=NB_PROJ,\n","                          pe_input=VOCAB_SIZE_EN,\n","                          pe_target=VOCAB_SIZE_FR,\n","                          dropout_rate=DROPOUT_RATE)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZududZUyZjjI","colab_type":"code","colab":{}},"source":["def create_masks(inp, tar):\n","  # Encoder padding mask\n","  enc_padding_mask = create_padding_mask(inp)\n","  \n","  # Used in the 2nd attention block in the decoder.\n","  # This padding mask is used to mask the encoder outputs.\n","  dec_padding_mask = create_padding_mask(inp)\n","  \n","  # Used in the 1st attention block in the decoder.\n","  # It is used to pad and mask future tokens in the input received by \n","  # the decoder.\n","  look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n","  dec_target_padding_mask = create_padding_mask(tar)\n","  combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n","  \n","  return enc_padding_mask, combined_mask, dec_padding_mask"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2TW28m9OuZMB","colab_type":"text"},"source":["## Loss Function"]},{"cell_type":"code","metadata":{"id":"46xg4Wrg1Wgl","colab_type":"code","colab":{}},"source":["#define loss function\n","loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True,\n","                                                            reduction=\"none\")\n","\n","def loss_function(target, pred):\n","    mask = tf.math.logical_not(tf.math.equal(target, 0))\n","    loss_ = loss_object(target, pred)\n","    \n","    mask = tf.cast(mask, dtype=loss_.dtype)\n","    loss_ *= mask\n","    \n","    return tf.reduce_mean(loss_)\n","\n","train_loss = tf.keras.metrics.Mean(name=\"train_loss\")\n","train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name=\"train_accuracy\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gFfvtKmYtHE8","colab_type":"text"},"source":["## Optimizer\n","The research paper uses a custom learning rate. So we will create a class which follows the Learning Rate as defined in the paper. <br>\n","\n","$lrate = d_{model}^{-0.5}   *  min(stepNum^{-0.5}, stepNum * warmupSteps^{-1.5})$"]},{"cell_type":"code","metadata":{"id":"4Goque362343","colab_type":"code","colab":{}},"source":["class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n","    \n","    def __init__(self, d_model, warmup_steps=4000):\n","        super(CustomSchedule, self).__init__()\n","        \n","        self.d_model = d_model\n","        self.d_model = tf.cast(d_model, tf.float32)\n","        self.warmup_steps = warmup_steps\n","    \n","    def __call__(self, step):\n","        arg1 = tf.math.rsqrt(step)\n","        arg2 = step * (self.warmup_steps**-1.5)\n","        \n","        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)\n","\n","leaning_rate = CustomSchedule(D_MODEL)\n","\n","optimizer = tf.keras.optimizers.Adam(leaning_rate,\n","                                     beta_1=0.9,\n","                                     beta_2=0.98,\n","                                     epsilon=1e-9)\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8Lp3rt8OIImA","colab_type":"code","outputId":"4852b23c-5911-41ea-b5f9-e972b1785f62","executionInfo":{"status":"ok","timestamp":1591404206221,"user_tz":420,"elapsed":451550,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":296}},"source":["temp_learning_rate_schedule = CustomSchedule(D_MODEL)\n","\n","plt.plot(temp_learning_rate_schedule(tf.range(40000, dtype=tf.float32)))\n","plt.ylabel(\"Learning Rate\")\n","plt.xlabel(\"Train Step\")"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Train Step')"]},"metadata":{"tags":[]},"execution_count":43},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"fW1B5XVuu-tC","colab_type":"text"},"source":["## Training and create Checkpoints"]},{"cell_type":"code","metadata":{"id":"Nb_32PIU5Zkh","colab_type":"code","outputId":"43e8ce7a-fa21-4087-f963-ca6b2b9fb55c","executionInfo":{"status":"ok","timestamp":1591404207195,"user_tz":420,"elapsed":452518,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["checkpoint_path = \"./drive/My Drive/en-fr/Checkpoint\"\n","\n","ckpt = tf.train.Checkpoint(transformer=transformer,\n","                           optimizer=optimizer)\n","\n","ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)\n","\n","if ckpt_manager.latest_checkpoint:\n","    ckpt.restore(ckpt_manager.latest_checkpoint)\n","    print(\"Latest checkpoint restored!!\")"],"execution_count":44,"outputs":[{"output_type":"stream","text":["Latest checkpoint restored!!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lhFK5kUx602K","colab_type":"text"},"source":["```\n","# Each epoch takes around 2 hours to run. We have trained and saved the model as checkpoint. \n","\n","EPOCHS = 5\n","for epoch in range(EPOCHS):\n","    print(\"Start of epoch {}\".format(epoch+1))\n","    start = time.time()\n","    \n","    train_loss.reset_states()\n","    train_accuracy.reset_states()\n","    \n","    for (batch, (enc_inputs, targets)) in enumerate(dataset):\n","        dec_inputs = targets[:, :-1]\n","        dec_outputs_real = targets[:, 1:]\n","        \n","        enc_padding_mask, combined_mask, dec_padding_mask = create_masks(enc_inputs, dec_inputs)\n","        \n","        with tf.GradientTape() as tape:\n","            predictions, _ = transformer(enc_inputs,\n","                                     dec_inputs,\n","                                     True,\n","                                     enc_padding_mask,\n","                                     combined_mask,\n","                                     dec_padding_mask)\n","            loss = loss_function(dec_outputs_real, predictions)\n","        \n","        gradients = tape.gradient(loss, transformer.trainable_variables)\n","        optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n","        \n","        train_loss(loss)\n","        train_accuracy(dec_outputs_real, predictions)\n","        \n","        if batch % 50 == 0:\n","            print(\"Epoch {} Batch {} Loss {:.4f} Accuracy {:.4f}\".format(\n","                epoch+1, batch, train_loss.result(), train_accuracy.result()))\n","       \n","    ckpt_save_path = ckpt_manager.save()\n","    print(\"Saving checkpoint for epoch {} at {}\".format(epoch+1,\n","                                                        ckpt_save_path))\n","    print(\"Time taken for 1 epoch: {} secs\\n\".format(time.time() - start))\n","```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"nmzyRwDrRGdq","colab_type":"text"},"source":["# Evaluating"]},{"cell_type":"code","metadata":{"id":"cNHwJJrz3lPB","colab_type":"code","colab":{}},"source":["def evaluate(inp_sentence):\n","    inp_sentence = \\\n","        [VOCAB_SIZE_EN-2] + tokenizer_en.encode(inp_sentence) + [VOCAB_SIZE_EN-1]\n","    enc_input = tf.expand_dims(inp_sentence, axis=0)\n","    \n","    output = tf.expand_dims([VOCAB_SIZE_FR-2], axis=0)\n","    \n","    for _ in range(MAX_LENGTH):\n","        enc_padding_mask, combined_mask, dec_padding_mask = create_masks(enc_input, output)\n","        \n","        predictions, attention_weights = transformer(enc_input, output, False,\n","                                                     enc_padding_mask,\n","                                                     combined_mask,\n","                                                     dec_padding_mask)\n","        \n","        prediction = predictions[:, -1:, :] # keep only the last word\n","        \n","        predicted_id = tf.cast(tf.argmax(prediction, axis=-1), tf.int32) # keep the id of prediction whose predicted probability was highest\n","        \n","        #if ending sentence token is read, stop translation and return the result\n","        if predicted_id == VOCAB_SIZE_FR-1:\n","            return tf.squeeze(output, axis=0), attention_weights\n","        \n","        #concatentate the predicted_id to the output which is given to the decoder as its input\n","        output = tf.concat([output, predicted_id], axis=-1)\n","        \n","    return tf.squeeze(output, axis=0), attention_weights"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SeK_SFaqZTNU","colab_type":"code","colab":{}},"source":["def plot_attention_weights(attention, sentence, result, layer):\n","  fig = plt.figure(figsize=(16, 8))\n","  \n","  sentence = tokenizer_en.encode(sentence)\n","  \n","  attention = tf.squeeze(attention[layer], axis=0)\n","  \n","  for head in range(attention.shape[0]):\n","    ax = fig.add_subplot(2, 4, head+1)\n","    \n","    # plot the attention weights\n","    ax.matshow(attention[head][:-1, :], cmap='viridis')\n","\n","    fontdict = {'fontsize': 10}\n","    \n","    ax.set_xticks(range(len(sentence)+2))\n","    ax.set_yticks(range(len(result)))\n","    \n","    ax.set_ylim(len(result)-1.5, -0.5)\n","        \n","    ax.set_xticklabels(\n","        ['<start>']+[tokenizer_en.decode([i]) for i in sentence]+['<end>'], \n","        fontdict=fontdict, rotation=90)\n","    \n","    ax.set_yticklabels([tokenizer_fr.decode([i]) for i in result \n","                        if i < tokenizer_fr.vocab_size], \n","                       fontdict=fontdict)\n","    \n","    ax.set_xlabel('Head {}'.format(head+1))\n","  \n","  plt.tight_layout()\n","  plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"s6VeFKrE6Kdx","colab_type":"code","colab":{}},"source":["def translate(sentence, plot=''):\n","  \n","    output, attention_weights = evaluate(sentence)\n","    \n","    predicted_sentence = tokenizer_fr.decode(\n","        [i for i in output if i < VOCAB_SIZE_FR-2]\n","    )\n","    \n","    print(\"Input: {}\".format(sentence))\n","    print(\"Predicted translation: {}\".format(predicted_sentence))\n","\n","    if plot:\n","      plot_attention_weights(attention_weights, sentence, output, plot)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZdoWKbCP7Czs","colab_type":"code","outputId":"5327979e-f924-4737-fabe-f5cff138b313","executionInfo":{"status":"ok","timestamp":1591404232776,"user_tz":420,"elapsed":478087,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":583}},"source":["translate(\"We are Group 4.\", plot='decoder_layer4_block2')"],"execution_count":48,"outputs":[{"output_type":"stream","text":["Input: We are Group 4.\n","Predicted translation: Nous sommes du groupe 4.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1152x576 with 8 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"LJfoGdUKaE5C","colab_type":"code","outputId":"07fff5f0-5456-4c81-95b4-00cbc08f8260","executionInfo":{"status":"ok","timestamp":1591404234675,"user_tz":420,"elapsed":479979,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":622}},"source":["translate(\"Hi I am from India.\", plot='decoder_layer4_block2')"],"execution_count":49,"outputs":[{"output_type":"stream","text":["Input: Hi I am from India.\n","Predicted translation: J'en suis d'Inde.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 8 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"fVBvGXYsflvN","colab_type":"code","outputId":"c3366c9a-cfee-477d-c709-923d605be6a8","executionInfo":{"status":"ok","timestamp":1591404236649,"user_tz":420,"elapsed":481946,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":601}},"source":["translate(\"We begin our classes in fall.\", plot='decoder_layer4_block2')"],"execution_count":50,"outputs":[{"output_type":"stream","text":["Input: We begin our classes in fall.\n","Predicted translation: Nous commençons par nos classes.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 8 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"HAyiY2ty1MEo","colab_type":"code","outputId":"f36729d1-7609-4d65-a728-1ccebedb553b","executionInfo":{"status":"ok","timestamp":1591404245575,"user_tz":420,"elapsed":490866,"user":{"displayName":"Group4 MachineLearning","photoUrl":"","userId":"17835644231830802559"}},"colab":{"base_uri":"https://localhost:8080/","height":437}},"source":["print(\"🅵🆁🅴🅽🅲🅷 101\")\n","print(\"𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\")\n","translate(\"Do you speak French ?\")\n","print(\"𝐘𝐨𝐮:\")\n","translate(\"No, I don't speak French,I speak English.\")\n","print(\"𝐘𝐨𝐮:\")\n","translate(\"I would like to reserve a flight for US from Paris.\")\n","print(\"𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\")\n","translate(\"The departure is at 12:00 hours.\")\n","print(\"𝐘𝐨𝐮:\")\n","translate(\"It's good.\")\n","print(\"𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\")\n","translate(\"Your reservation for US is confirmed.\")\n","print(\"𝐘𝐨𝐮:\")\n","translate(\"Thank You \")\n","print(\"𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\")\n","translate(\"Please give me five Stars.\")\n"],"execution_count":51,"outputs":[{"output_type":"stream","text":["🅵🆁🅴🅽🅲🅷 101\n","𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\n","Input: Do you speak French ?\n","Predicted translation: Vous parlez de français?\n","𝐘𝐨𝐮:\n","Input: No, I don't speak French,I speak English.\n","Predicted translation: Non, je ne parle pas de français, je parle anglais.\n","𝐘𝐨𝐮:\n","Input: I would like to reserve a flight for US from Paris.\n","Predicted translation: Je voudrais réserver un vol pour les États-Unis de Paris.\n","𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\n","Input: The departure is at 12:00 hours.\n","Predicted translation: Le départ est à 12 heures.\n","𝐘𝐨𝐮:\n","Input: It's good.\n","Predicted translation: C'est bien le bien.\n","𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\n","Input: Your reservation for US is confirmed.\n","Predicted translation: Votre réserve pour les États-Unis est confirmée.\n","𝐘𝐨𝐮:\n","Input: Thank You \n","Predicted translation: Merci beaucoup\n","𝗔𝗶𝗿𝗹𝗶𝗻𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗶𝗻 𝗣𝗮𝗿𝗶𝘀 :\n","Input: Please give me five Stars.\n","Predicted translation: Je vous prie de donner cinq Staes.\n"],"name":"stdout"}]}]}